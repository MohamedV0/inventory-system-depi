@model IEnumerable<InventoryManagementSystem.Models.ViewModels.Notification.NotificationViewModel>
@using InventoryManagementSystem.Models.Common

<div class="container-fluid px-3 py-2">
    <div class="card content-card shadow-sm">
        <div class="card-header bg-dark border-bottom border-secondary d-flex justify-content-between align-items-center py-3">
            <h5 class="mb-0 d-flex align-items-center">
                <span class="icon-circle bg-primary-subtle me-2">
                    <i class="fas fa-bell text-primary"></i>
                </span>
                Notifications
            </h5>
            @if (Model.Any(n => !n.IsRead))
            {
                <button id="markAllBtn" class="btn btn-outline-primary btn-sm" onclick="markAllAsRead()">
                    <i class="fas fa-check-double me-1"></i>
                    <span>Mark All as Read</span>
                    <span class="spinner-border spinner-border-sm ms-1 d-none" role="status"></span>
                </button>
            }
        </div>
        <div class="card-body p-0 bg-dark">
            <div id="loadingOverlay" class="position-absolute w-100 h-100 bg-dark bg-opacity-75 d-none" style="top: 0; left: 0; z-index: 1000;">
                <div class="d-flex justify-content-center align-items-center h-100">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            @if (!Model.Any())
            {
                <div class="empty-state d-flex flex-column align-items-center justify-content-center py-5">
                    <div class="text-center">
                        <i class="fas fa-bell-slash fa-4x text-muted mb-3 d-block"></i>
                        <h6 class="text-muted mb-0">No notifications to display</h6>
                    </div>
                </div>
            }
            else
            {
                <div class="notification-list">
                    @foreach (var notification in Model.OrderByDescending(n => n.CreatedAt))
                    {
                        string navigationUrl = notification.Type switch
                        {
                            NotificationType.LowStock => notification.ProductId.HasValue ? $"/Product/Details/{notification.ProductId}" : "#",
                            NotificationType.OutOfStock => notification.ProductId.HasValue ? $"/Product/Details/{notification.ProductId}" : "#",
                            NotificationType.StockOut => notification.ProductId.HasValue ? $"/Product/Details/{notification.ProductId}" : "#",
                            NotificationType.ExpiryWarning => notification.ProductId.HasValue ? $"/Product/Details/{notification.ProductId}" : "#",
                            _ => "#"
                        };

                        <div class="notification-item @(!notification.IsRead ? "unread" : "")" 
                             data-notification-id="@notification.Id"
                             onclick="handleNotificationClick('@notification.Id', '@navigationUrl')">
                            <div class="notification-icon">
                                @{
                                    var iconClass = notification.Type switch
                                    {
                                        NotificationType.LowStock => "fas fa-exclamation-triangle text-warning",
                                        NotificationType.OutOfStock => "fas fa-times-circle text-danger",
                                        NotificationType.StockOut => "fas fa-times-circle text-danger",
                                        NotificationType.ExpiryWarning => "fas fa-clock text-warning",
                                        NotificationType.SystemAlert => "fas fa-info-circle text-info",
                                        NotificationType.Error => "fas fa-exclamation-circle text-danger",
                                        NotificationType.Warning => "fas fa-exclamation-triangle text-warning",
                                        _ => "fas fa-bell text-primary"
                                    };
                                }
                                <span class="icon-circle bg-dark">
                                    <i class="@iconClass"></i>
                                </span>
                            </div>
                            <div class="notification-content">
                                <div class="notification-header">
                                    <h6 class="notification-title text-light mb-1">@notification.Title</h6>
                                    <div class="notification-time text-muted small">
                                        <i class="fas fa-clock me-1"></i>
                                        @notification.CreatedAt.ToLocalTime().ToString("MMM dd, HH:mm")
                                    </div>
                                </div>
                                <p class="notification-message text-secondary mb-2">@notification.Message</p>
                                <div class="notification-badges">
                                    <span class="badge bg-@(notification.Type.ToString().ToLowerInvariant()) rounded-pill">
                                        <i class="fas fa-tag me-1"></i>
                                        @notification.Type
                                    </span>
                                    <span class="badge bg-@(notification.Priority.ToString().ToLowerInvariant()) rounded-pill">
                                        <i class="fas fa-flag me-1"></i>
                                        @notification.Priority
                                    </span>
                                    @if (!notification.IsRead)
                                    {
                                        <span class="badge bg-primary rounded-pill">
                                            <i class="fas fa-circle me-1"></i>
                                            New
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@* Add anti-forgery token *@
@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Get the anti-forgery token
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Toast notification function
        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            document.body.appendChild(container);
            return container;
        }

        function setLoading(isLoading) {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.toggle('d-none', !isLoading);
            }
        }

        function handleNotificationClick(id, navigationUrl) {
            const notificationItem = document.querySelector(`[data-notification-id="${id}"]`);
            if (notificationItem) {
                notificationItem.style.opacity = '0.7';
                notificationItem.style.pointerEvents = 'none';
            }

            // First mark as read
            markAsRead(id)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to mark notification as read');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update UI
                        if (notificationItem) {
                            notificationItem.classList.remove('unread');
                            const newBadge = notificationItem.querySelector('.badge.bg-primary');
                            if (newBadge) {
                                newBadge.remove();
                            }
                            showToast('Notification marked as read');
                        }

                        // Then navigate if there's a valid URL
                        if (navigationUrl && navigationUrl !== '#') {
                            window.location.href = navigationUrl;
                        }
                    } else {
                        showToast(data.message || 'Failed to mark notification as read', 'danger');
                        // Still navigate even if marking as read fails
                        if (navigationUrl && navigationUrl !== '#') {
                            window.location.href = navigationUrl;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while marking notification as read', 'danger');
                    // Still navigate even if marking as read fails
                    if (navigationUrl && navigationUrl !== '#') {
                        window.location.href = navigationUrl;
                    }
                })
                .finally(() => {
                    if (notificationItem) {
                        notificationItem.style.opacity = '';
                        notificationItem.style.pointerEvents = '';
                    }
                });
        }

        function markAsRead(id) {
            return fetch(`/Notification/MarkAsRead/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken
                }
            });
        }

        function markAllAsRead() {
            const markAllBtn = document.getElementById('markAllBtn');
            if (markAllBtn) {
                const spinner = markAllBtn.querySelector('.spinner-border');
                const textSpan = markAllBtn.querySelector('span:not(.spinner-border)');
                spinner.classList.remove('d-none');
                textSpan.classList.add('d-none');
                markAllBtn.disabled = true;
            }

            fetch('/Notification/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to mark all notifications as read');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Update UI
                    document.querySelectorAll('.notification-item.unread').forEach(item => {
                        item.classList.remove('unread');
                        const newBadge = item.querySelector('.badge.bg-primary');
                        if (newBadge) {
                            newBadge.remove();
                        }
                    });
                    if (markAllBtn) {
                        markAllBtn.remove();
                    }
                    showToast('All notifications marked as read');
                } else {
                    showToast(data.message || 'Failed to mark all notifications as read', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while marking all notifications as read', 'danger');
                if (markAllBtn) {
                    const spinner = markAllBtn.querySelector('.spinner-border');
                    const textSpan = markAllBtn.querySelector('span:not(.spinner-border)');
                    spinner.classList.add('d-none');
                    textSpan.classList.remove('d-none');
                    markAllBtn.disabled = false;
                }
            });
        }
    </script>
} 