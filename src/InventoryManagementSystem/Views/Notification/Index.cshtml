@model IEnumerable<InventoryManagementSystem.Models.ViewModels.Notification.NotificationViewModel>
@using InventoryManagementSystem.Models.Common

<div class="container-fluid px-3 py-2">
    <div class="row justify-content-center">
        <div class="col-12 col-xl-10">
            <div class="card shadow-sm border border-dark">
                <div class="card-header bg-dark border-bottom border-dark py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <div class="icon-circle bg-primary bg-opacity-10 me-3">
                                <i class="fas fa-bell text-primary fs-4"></i>
                            </div>
                            <h4 class="mb-0 text-light">Notifications Center</h4>
                        </div>
                        @if (Model.Any(n => !n.IsRead))
                        {
                            <button id="markAllBtn" class="btn btn-outline-primary" onclick="markAllAsRead()">
                                <i class="fas fa-check-double me-2"></i>
                                <span>Mark All as Read</span>
                                <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
                            </button>
                        }
                    </div>
                </div>

                <div class="card-body p-0 bg-dark position-relative">
                    <div id="loadingOverlay" class="position-absolute w-100 h-100 bg-dark bg-opacity-75 d-none" 
                         style="top: 0; left: 0; z-index: 1000;">
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>

                    @if (!Model.Any())
                    {
                        <div class="empty-state d-flex flex-column align-items-center justify-content-center py-5 min-vh-50">
                            <div class="text-center">
                                <div class="icon-circle bg-dark mb-4 mx-auto d-flex align-items-center justify-content-center" style="width: 100px; height: 100px">
                                    <i class="fas fa-bell-slash text-muted" style="font-size: 3rem"></i>
                                </div>
                                <h5 class="text-muted mb-2">No Notifications</h5>
                                <p class="text-secondary mb-0">You're all caught up! Check back later for updates.</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="notification-list">
                            @foreach (var notification in Model.OrderByDescending(n => n.CreatedAt))
                            {
                                string navigationUrl = notification.Type switch
                                {
                                    NotificationType.LowStock => notification.ProductId.HasValue ? $"/Products/Details/{notification.ProductId}" : "#",
                                    NotificationType.OutOfStock => notification.ProductId.HasValue ? $"/Products/Details/{notification.ProductId}" : "#",
                                    NotificationType.StockOut => notification.ProductId.HasValue ? $"/Products/Details/{notification.ProductId}" : "#",
                                    NotificationType.ExpiryWarning => notification.ProductId.HasValue ? $"/Products/Details/{notification.ProductId}" : "#",
                                    _ => "#"
                                };

                                var (badgeClass, badgeIcon, badgeText) = notification.Type switch
                                {
                                    NotificationType.LowStock => ("bg-warning bg-opacity-25 text-warning", "fas fa-exclamation-triangle", "Low Stock"),
                                    NotificationType.OutOfStock => ("bg-danger bg-opacity-25 text-danger", "fas fa-times-circle", "Out of Stock"),
                                    NotificationType.StockOut => ("bg-danger bg-opacity-25 text-danger", "fas fa-times-circle", "Stock Out"),
                                    NotificationType.ExpiryWarning => ("bg-warning bg-opacity-25 text-warning", "fas fa-clock", "Expiry Warning"),
                                    NotificationType.SystemAlert => ("bg-info bg-opacity-25 text-info", "fas fa-info-circle", "System Alert"),
                                    NotificationType.Error => ("bg-danger bg-opacity-25 text-danger", "fas fa-exclamation-circle", "Error"),
                                    NotificationType.Warning => ("bg-warning bg-opacity-25 text-warning", "fas fa-exclamation-triangle", "Warning"),
                                    _ => ("bg-primary bg-opacity-25 text-primary", "fas fa-bell", "Info")
                                };

                                var priorityBadgeClass = notification.Priority switch
                                {
                                    NotificationPriority.High => "bg-danger bg-opacity-25 text-danger",
                                    NotificationPriority.Medium => "bg-warning bg-opacity-25 text-warning",
                                    _ => "bg-info bg-opacity-25 text-info"
                                };

                                <div class="notification-item p-4 border-bottom border-dark @(!notification.IsRead ? "unread bg-dark bg-opacity-75" : "")" 
                                     data-notification-id="@notification.Id"
                                     onclick="handleNotificationClick('@notification.Id', '@navigationUrl')">
                                    <div class="row align-items-center">
                                        <div class="col-auto">
                                            <div class="icon-circle @badgeClass" style="width: 48px; height: 48px">
                                                <i class="@badgeIcon fs-4"></i>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h5 class="text-light mb-0">@notification.Title</h5>
                                                <div class="text-muted small d-flex align-items-center">
                                                    <i class="fas fa-clock me-1"></i>
                                                    @notification.CreatedAt.ToLocalTime().ToString("MMM dd, HH:mm")
                                                </div>
                                            </div>
                                            <p class="text-secondary mb-3">@notification.Message</p>
                                            <div class="d-flex align-items-center gap-2">
                                                <span class="badge rounded-pill py-2 px-3 @badgeClass">
                                                    <i class="@badgeIcon me-1"></i> @badgeText
                                                </span>
                                                <span class="badge rounded-pill py-2 px-3 @priorityBadgeClass">
                                                    <i class="fas fa-flag me-1"></i> @notification.Priority
                                                </span>
                                                @if (!notification.IsRead)
                                                {
                                                    <span class="badge rounded-pill py-2 px-3 bg-primary bg-opacity-25 text-primary">
                                                        <i class="fas fa-circle me-1"></i> New
                                                    </span>
                                                }
                                                @if (notification.ProductId.HasValue)
                                                {
                                                    <a href="@navigationUrl" class="ms-auto btn btn-link btn-sm text-primary text-decoration-none">
                                                        View Details <i class="fas fa-chevron-right ms-1"></i>
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Get the anti-forgery token
        const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        function setLoading(isLoading) {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                overlay.classList.toggle('d-none', !isLoading);
            }
        }

        function handleNotificationClick(id, navigationUrl) {
            const notificationItem = document.querySelector(`[data-notification-id="${id}"]`);
            if (notificationItem) {
                notificationItem.style.opacity = '0.7';
                notificationItem.style.pointerEvents = 'none';
            }

            // First mark as read
            markAsRead(id)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to mark notification as read');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update UI
                        if (notificationItem) {
                            notificationItem.classList.remove('unread');
                            const newBadge = notificationItem.querySelector('.badge.bg-primary');
                            if (newBadge) {
                                newBadge.remove();
                            }
                            toastr.success('Notification marked as read');
                        }

                        // Then navigate if there's a valid URL
                        if (navigationUrl && navigationUrl !== '#') {
                            window.location.href = navigationUrl;
                        }
                    } else {
                        toastr.error(data.message || 'Failed to mark notification as read');
                        // Still navigate even if marking as read fails
                        if (navigationUrl && navigationUrl !== '#') {
                            window.location.href = navigationUrl;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    toastr.error('An error occurred while marking notification as read');
                    // Still navigate even if marking as read fails
                    if (navigationUrl && navigationUrl !== '#') {
                        window.location.href = navigationUrl;
                    }
                })
                .finally(() => {
                    if (notificationItem) {
                        notificationItem.style.opacity = '';
                        notificationItem.style.pointerEvents = '';
                    }
                });
        }

        function markAsRead(id) {
            return fetch(`/Notification/MarkAsRead/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken
                }
            });
        }

        function markAllAsRead() {
            const markAllBtn = document.getElementById('markAllBtn');
            if (markAllBtn) {
                const spinner = markAllBtn.querySelector('.spinner-border');
                const textSpan = markAllBtn.querySelector('span:not(.spinner-border)');
                spinner.classList.remove('d-none');
                textSpan.classList.add('d-none');
                markAllBtn.disabled = true;
            }

            fetch('/Notification/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': antiForgeryToken
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to mark all notifications as read');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Update UI
                    document.querySelectorAll('.notification-item.unread').forEach(item => {
                        item.classList.remove('unread');
                        const newBadge = item.querySelector('.badge.bg-primary');
                        if (newBadge) {
                            newBadge.remove();
                        }
                    });
                    if (markAllBtn) {
                        markAllBtn.remove();
                    }
                    toastr.success('All notifications marked as read');
                } else {
                    toastr.error(data.message || 'Failed to mark all notifications as read');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                toastr.error('An error occurred while marking all notifications as read');
                if (markAllBtn) {
                    const spinner = markAllBtn.querySelector('.spinner-border');
                    const textSpan = markAllBtn.querySelector('span:not(.spinner-border)');
                    spinner.classList.add('d-none');
                    textSpan.classList.remove('d-none');
                    markAllBtn.disabled = false;
                }
            });
        }
    </script>
} 