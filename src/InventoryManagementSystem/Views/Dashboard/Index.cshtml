@model InventoryManagementSystem.Models.ViewModels.DashboardViewModel
@using InventoryManagementSystem.Models.ViewComponents
@using Microsoft.AspNetCore.Html
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid px-3 py-2">
    <!-- Use the PageHeader partial with fluent API similar to Details.cshtml -->
    @{
        var exportUrl = Url.Action("Index", "Reports");
        var headerModel = InventoryManagementSystem.Models.ViewComponents.PageHeaderViewModel
            .Create("Analytics Dashboard", "fas fa-chart-line")
            .WithSecondaryButton("Export Report", exportUrl, "fas fa-file-export");
    }
    <partial name="_PageHeader" model="headerModel" />

    <!-- Stats Cards Row -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            @{
                var productsCard = StatCardViewModel
                    .Create("Total Products", Model.TotalProducts.ToString(), "fas fa-boxes text-primary")
                    .WithIconClass("bg-primary-subtle")
                    .WithTrend(Model.ProductTrend);
            }
            <partial name="_StatCard" model="productsCard" />
        </div>
        <div class="col-md-3">
            @{
                var inventoryCard = StatCardViewModel
                    .Create("Inventory Value", $"${Model.TotalInventoryValue.ToString("N0")}", "fas fa-dollar-sign text-success")
                    .WithIconClass("bg-success-subtle")
                    .WithTrend(Model.InventoryValueTrend);
            }
            <partial name="_StatCard" model="inventoryCard" />
        </div>
        <div class="col-md-3">
            @{
                // Create the HTML content for low stock indicators
                var lowStockHtml = new HtmlString(
                    $@"<div class=""mt-1"">
                        <small class=""text-danger me-2""><i class=""fas fa-exclamation-circle""></i> Critical: {Model.CriticalStockCount}</small>
                        <small class=""text-warning""><i class=""fas fa-exclamation-triangle""></i> Warning: {Model.LowStockCount - Model.CriticalStockCount}</small>
                    </div>");
                
                var lowStockCard = StatCardViewModel
                    .Create("Low Stock Items", Model.LowStockCount.ToString(), "fas fa-exclamation-triangle text-warning")
                    .WithIconClass("bg-warning-subtle")
                    .WithAdditionalContent(lowStockHtml);
            }
            <partial name="_StatCard" model="lowStockCard" />
        </div>
        <div class="col-md-3">
            @{
                var suppliersCard = StatCardViewModel
                    .Create("Total Suppliers", Model.TotalSuppliers.ToString(), "fas fa-truck text-info")
                    .WithIconClass("bg-info-subtle")
                    .WithSubtitle("Registered suppliers");
            }
            <partial name="_StatCard" model="suppliersCard" />
        </div>
    </div>

    <div class="row g-3">
        <!-- Main Charts Section -->
        <div class="col-md-8">
            <!-- Inventory Value Chart -->
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-3 flex-column flex-md-row">
                    <h5 class="mb-2 mb-md-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-chart-line text-primary"></i>
                        </span>
                        Inventory Value Over Time
                    </h5>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-dark time-filter active" data-period="week">Week</button>
                        <button type="button" class="btn btn-sm btn-dark time-filter" data-period="month">Month</button>
                        <button type="button" class="btn btn-sm btn-dark time-filter" data-period="quarter">Quarter</button>
                    </div>
                </div>
                <div class="card-body p-3" style="height: 300px;">
                    <canvas id="inventoryValueChart"></canvas>
                </div>
                <div class="card-footer bg-transparent border-top-0 py-2">
                    <div class="row text-center">
                        <div class="col">
                            <small class="text-muted">Predicted Next Week:</small><br>
                            <span class="text-success">$@Model.PredictedInventoryValue.ToString("N0")</span>
                        </div>
                        <div class="col">
                            <small class="text-muted">Optimal Range:</small><br>
                            <span class="text-primary">$@Model.OptimalInventoryRange.Item1.ToString("N0") - $@Model.OptimalInventoryRange.Item2.ToString("N0")</span>
                        </div>
                        <div class="col">
                            <small class="text-muted">Trend:</small><br>
                            <span class="@(Model.InventoryValueTrend >= 0 ? "text-success" : "text-danger")">
                                <i class="fas fa-arrow-@(Model.InventoryValueTrend >= 0 ? "up" : "down")"></i>
                                @Math.Abs(Model.InventoryValueTrend)%
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Stock Movement Chart -->
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-3 flex-column flex-md-row">
                    <h5 class="mb-2 mb-md-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-exchange-alt text-primary"></i>
                        </span>
                        Stock Movement Analysis
                    </h5>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-dark mvt-filter active" data-type="all">All</button>
                        <button type="button" class="btn btn-sm btn-dark mvt-filter" data-type="in">Stock In</button>
                        <button type="button" class="btn btn-sm btn-dark mvt-filter" data-type="out">Stock Out</button>
                    </div>
                </div>
                <div class="card-body p-3" style="height: 300px;">
                    <canvas id="stockMovementChart"></canvas>
                </div>
                <div class="card-footer bg-transparent border-top-0 py-2">
                    <div class="row text-center">
                        <div class="col">
                            <small class="text-muted">Average Daily Movement:</small><br>
                            <span class="text-primary">@Model.AverageDailyMovement items</span>
                        </div>
                        <div class="col">
                            <small class="text-muted">Peak Hours:</small><br>
                            <span class="text-primary">
                                @string.Join(", ", Model.PeakMovementHours.Select(h => $"{h:D2}:00"))
                            </span>
                        </div>
                        <div class="col">
                            <small class="text-muted">Efficiency:</small><br>
                            <span class="text-success">@Model.MovementEfficiency%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Side Charts Section -->
        <div class="col-md-4">
            <!-- Stock Health Score -->
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-heartbeat text-primary"></i>
                        </span>
                        Stock Health Score
                    </h5>
                    <span class="badge @(Model.StockHealthScore >= 80 ? "bg-success" : Model.StockHealthScore >= 60 ? "bg-info" : Model.StockHealthScore >= 40 ? "bg-warning" : "bg-danger") fs-6 py-1 px-3">
                        <i class="fas @(Model.StockHealthScore >= 80 ? "fa-check-circle" : Model.StockHealthScore >= 60 ? "fa-info-circle" : Model.StockHealthScore >= 40 ? "fa-exclamation-circle" : "fa-times-circle") me-1"></i>
                        @(Model.StockHealthScore >= 80 ? "Excellent" : Model.StockHealthScore >= 60 ? "Good" : Model.StockHealthScore >= 40 ? "Fair" : "Poor")
                    </span>
                </div>
                <div class="card-body p-3">
                    <div class="row g-3 mb-3">
                        <div class="col-md-5">
                            <div class="chart-wrapper position-relative">
                                <div class="health-score-circle">
                                    <div class="position-absolute top-50 start-50 translate-middle text-center">
                                        <h2 class="mb-0 score @Model.StockHealthClass">@Model.StockHealthScore</h2>
                                        <div class="small text-white">health score</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7 d-flex flex-column justify-content-center">
                            <div class="stock-metrics">
                                <div class="stock-metric-item mb-2">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="d-flex align-items-center">
                                            <i class="fas fa-sync-alt me-2" style="color: #3B82F6;"></i>
                                            <span style="color: #3B82F6; font-weight: 500;">Turnover</span>
                                        </span>
                                        <span class="fw-bold" style="color: #3B82F6;">@Model.TurnoverRate.ToString("0.0")%</span>
                                    </div>
                                    <div class="progress progress-thin" style="height: 5px;">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @Math.Min(100, Model.TurnoverRate)%; background-color: #3B82F6;"></div>
                                    </div>
                                </div>
                                <div class="stock-metric-item mb-2">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="d-flex align-items-center">
                                            <i class="fas fa-box me-2" style="color: #EF4444;"></i>
                                            <span style="color: #EF4444; font-weight: 500;">Dead Stock</span>
                                        </span>
                                        <span class="fw-bold" style="color: #EF4444;">@Model.DeadStockPercentage.ToString("0.0")%</span>
                                    </div>
                                    <div class="progress progress-thin" style="height: 5px;">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @Math.Min(100, Model.DeadStockPercentage)%; background-color: #EF4444;"></div>
                                    </div>
                                </div>
                                <div class="stock-metric-item mb-2">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="d-flex align-items-center">
                                            <i class="fas fa-check-double me-2" style="color: #10B981;"></i>
                                            <span style="color: #10B981; font-weight: 500;">Accuracy</span>
                                        </span>
                                        <span class="fw-bold" style="color: #10B981;">@Model.StockAccuracy.ToString("0.0")%</span>
                                    </div>
                                    <div class="progress progress-thin" style="height: 5px;">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @Math.Min(100, Model.StockAccuracy)%; background-color: #10B981;"></div>
                                    </div>
                                </div>
                                <div class="stock-metric-item">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="d-flex align-items-center">
                                            <i class="fas fa-shopping-cart me-2" style="color: #F59E0B;"></i>
                                            <span style="color: #F59E0B; font-weight: 500;">Reorder Rate</span>
                                        </span>
                                        <span class="fw-bold" style="color: #F59E0B;">@Model.ReorderRate.ToString("0.0")%</span>
                                    </div>
                                    <div class="progress progress-thin" style="height: 5px;">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @Math.Min(100, Model.ReorderRate)%; background-color: #F59E0B;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Stock Insights -->
                    <div class="stock-insights mt-3">
                        <div class="insight-item d-flex justify-content-between align-items-center p-2 rounded mb-2" 
                             style="background-color: rgba(59, 130, 246, 0.15);">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2 text-primary"></i>
                                <span class="fw-medium">Health Score Factors</span>
                            </div>
                            <a href="#" class="text-primary text-decoration-none small">
                                <i class="fas fa-question-circle me-1"></i>Details
                            </a>
                        </div>
                        
                        <div class="position-relative mt-3">
                            <div class="row g-2">
                                <div class="col-12">
                                    <div class="d-flex justify-content-between mb-1 small text-muted">
                                        <div>Poor</div>
                                        <div>Fair</div>
                                        <div>Good</div>
                                        <div>Excellent</div>
                                    </div>
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar bg-danger" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                        <div class="progress-bar bg-warning" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                        <div class="progress-bar bg-info" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                        <div class="progress-bar bg-success" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <div class="position-absolute" style="top: 22px; left: calc(@Model.StockHealthScore% - 7px);">
                                        <i class="fas fa-caret-up text-white fs-5"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Health Recommendations -->
                        <div class="health-recommendation mt-3 p-2 rounded" 
                             style="background-color: @(Model.StockHealthScore >= 80 ? "rgba(16, 185, 129, 0.15)" : Model.StockHealthScore >= 60 ? "rgba(59, 130, 246, 0.15)" : Model.StockHealthScore >= 40 ? "rgba(245, 158, 11, 0.15)" : "rgba(239, 68, 68, 0.15)");">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-lightbulb me-2" 
                                   style="color: @(Model.StockHealthScore >= 80 ? "#10B981" : Model.StockHealthScore >= 60 ? "#3B82F6" : Model.StockHealthScore >= 40 ? "#F59E0B" : "#EF4444");"></i>
                                <span class="fw-medium" 
                                      style="color: @(Model.StockHealthScore >= 80 ? "#10B981" : Model.StockHealthScore >= 60 ? "#3B82F6" : Model.StockHealthScore >= 40 ? "#F59E0B" : "#EF4444");">
                                    Recommendation
                                </span>
                            </div>
                            <p class="small mb-0">
                                @(Model.StockHealthScore >= 80 ? "Your inventory is in excellent health. Continue monitoring turnover rates to maintain optimal levels." : 
                                Model.StockHealthScore >= 60 ? "Stock health is good. Consider reviewing dead stock items to further improve efficiency." : 
                                Model.StockHealthScore >= 40 ? "Fair health score. Focus on improving stock accuracy and reducing dead stock items." : 
                                "Stock health needs immediate attention. Prioritize stock accuracy, reduce dead inventory, and review reorder processes.")
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Critical Alerts -->
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex align-items-center py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-bell text-warning me-2"></i>
                        Critical Alerts
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="alert-list">
                        @if (Model.LowStockCount > 0)
                        {
                            <div class="alert-item bg-warning-subtle">
                                <div class="alert-icon">
                                    <i class="fas fa-exclamation-triangle text-warning"></i>
                                </div>
                                <div class="alert-content">
                                    <div class="alert-title">Low Stock Alert</div>
                                    <small class="text-muted">@Model.LowStockCount products below reorder level</small>
                                </div>
                                <div class="alert-action">
                                    <a href="@Url.Action("LowStock", "Products")" class="btn btn-sm btn-outline-warning">
                                <i class="fas fa-search"></i>
                            </a>
                                </div>
                            </div>
                        }
                        
                        @if (Model.CriticalStockCount > 0)
                        {
                            <div class="alert-item bg-danger-subtle">
                                <div class="alert-icon">
                                    <i class="fas fa-times-circle text-danger"></i>
                                </div>
                                <div class="alert-content">
                                    <div class="alert-title">Out of Stock Alert</div>
                                    <small class="text-muted">@Model.CriticalStockCount products out of stock</small>
                                </div>
                                <div class="alert-action">
                                    <a href="@Url.Action("Index", "Stocks", new { page = 1, transactionType = 2 })" class="btn btn-sm btn-outline-danger">
                                        <i class="fas fa-search"></i>
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Action Recommendations -->
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex align-items-center py-3">
                    <h5 class="mb-0">
                        <i class="fas fa-lightbulb text-warning me-2"></i>
                        Recommended Actions
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="action-list">
                        @foreach (var recommendation in Model.Recommendations)
                        {
                            <div class="action-item">
                                <div class="action-icon">
                                    <i class="@recommendation.Icon"></i>
                                </div>
                                <div class="action-content">
                                    <div class="action-title">@recommendation.Title</div>
                                    <small class="text-muted">@recommendation.Description</small>
                                </div>
                                <div class="action-button">
                                    <a href="@recommendation.ActionUrl" class="btn btn-sm btn-success">
                                        @recommendation.ActionText
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bottom Tables Row -->
    <div class="row g-3">
        <!-- Product Movement Table -->
        <div class="col-md-6">
            <div class="card content-card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-star text-primary"></i>
                        </span>
                        Top Products by Stock Movement
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table m-0">
                            <thead>
                                <tr>
                                    <th>PRODUCT</th>
                                    <th class="text-center">STOCK IN</th>
                                    <th class="text-center">STOCK OUT</th>
                                    <th class="text-center">TURNOVER</th>
                                    <th class="text-center">TREND</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var product in Model.TopProducts)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="product-name">@product.Name</div>
                                                @if (product.NeedsReorder)
                                                {
                                                    <span class="badge bg-warning ms-2">Reorder</span>
                                                }
                                            </div>
                                        </td>
                                        <td class="text-center text-success">+@product.StockIn</td>
                                        <td class="text-center text-danger">-@product.StockOut</td>
                                        <td class="text-center">
                                            <div class="progress progress-thin" style="height: 6px;">
                                                <div class="progress-bar @product.TurnoverClass" 
                                                     style="width: @product.TurnoverRate%">
                                                </div>
                                            </div>
                                            <span class="small">@product.TurnoverRate.ToString("0.0")%</span>
                                        </td>
                                        <td class="text-center">
                                            <span class="@product.TrendClass">
                                                <i class="fas fa-arrow-@product.TrendDirection"></i>
                                                @Math.Abs(product.TrendPercentage).ToString("0.0")%
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Supplier Performance -->
        <div class="col-md-6">
            <div class="card content-card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-truck text-primary"></i>
                        </span>
                        Supplier Performance
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table m-0">
                            <thead>
                                <tr>
                                    <th>SUPPLIER</th>
                                    <th class="text-center">LEAD TIME</th>
                                    <th class="text-center">COMPLETION</th>
                                    <th class="text-center">QUALITY</th>
                                    <th class="text-center">RISK</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var supplier in Model.SupplierPerformances)
                                {
                                    <tr>
                                        <td>@supplier.SupplierName</td>
                                        <td class="text-center">
                                            <span class="@(supplier.LeadTimeDays <= 3 ? "text-success" : supplier.LeadTimeDays <= 5 ? "text-warning" : "text-danger")">
                                                @supplier.LeadTimeDays days
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <div class="progress progress-thin" style="height: 6px;">
                                                <div class="progress-bar @(supplier.OrderCompletionRate >= 90 ? "bg-success" : supplier.OrderCompletionRate >= 75 ? "bg-warning" : "bg-danger")" 
                                                     style="width: @supplier.OrderCompletionRate%">
                                                </div>
                                            </div>
                                            <span class="small">@supplier.OrderCompletionRate.ToString("0.0")%</span>
                                        </td>
                                        <td class="text-center">
                                            <div class="supplier-rating">
                                                @{
                                                    // Calculate quality rating based on completion rate
                                                    var qualityRating = supplier.OrderCompletionRate >= 95 ? 5 :
                                                                     supplier.OrderCompletionRate >= 90 ? 4 :
                                                                     supplier.OrderCompletionRate >= 80 ? 3 :
                                                                     supplier.OrderCompletionRate >= 70 ? 2 : 1;
                                                }
                                                @for (var i = 1; i <= 5; i++)
                                                {
                                                    if (i <= qualityRating)
                                                    {
                                                        <i class="fas fa-star text-warning"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="far fa-star text-muted"></i>
                                                    }
                                                }
                                            </div>
                                        </td>
                                        <td class="text-center">
                                            @{
                                                var riskLevel = supplier.OrderCompletionRate >= 90 ? "Low" :
                                                             supplier.OrderCompletionRate >= 75 ? "Medium" : "High";
                                                var riskClass = riskLevel == "Low" ? "bg-success" :
                                                             riskLevel == "Medium" ? "bg-warning" : "bg-danger";
                                            }
                                            <span class="badge @riskClass">
                                                @riskLevel
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/components/dashboard.css" />
}

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Common chart configuration
    const chartConfig = {
        initializeChartDefaults() {
            Chart.defaults.color = '#c2c7d0';
            Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.1)';
        },

        getCommonOptions(type) {
            return {
                responsive: true,
                maintainAspectRatio: false,
                animations: {
                    tension: {
                        duration: 1000,
                        easing: 'linear'
                    }
                },
                plugins: {
                    legend: {
                        display: type !== 'line'
                    }
                }
            };
        },

        destroyChartIfExists(chart) {
            if (chart) {
                chart.destroy();
            }
        }
    };

    // Chart instances
    let inventoryValueChart;
    let stockMovementChart;
    
    // Data sets
    const inventoryValueData = {
        week: {
            labels: @Json.Serialize(Model.WeeklyInventoryValues.Keys.Select(d => d.ToString("ddd"))),
            data: @Json.Serialize(Model.WeeklyInventoryValues.Values)
        },
        month: {
            labels: @Json.Serialize(Model.MonthlyInventoryValues.Keys.Select(d => $"Week {((d.Day - 1) / 7) + 1}")),
            data: @Json.Serialize(Model.MonthlyInventoryValues.Values)
        },
        quarter: {
            labels: @Json.Serialize(Model.QuarterlyInventoryValues.Keys.Select(d => d.ToString("MMM"))),
            data: @Json.Serialize(Model.QuarterlyInventoryValues.Values)
        }
    };
    
    const stockMovementData = {
        all: {
            labels: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.Date.ToString("MMM dd"))),
            stockIn: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.StockIn)),
            stockOut: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.StockOut))
        },
        in: {
            labels: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.Date.ToString("MMM dd"))),
            stockIn: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.StockIn)),
            stockOut: []
        },
        out: {
            labels: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.Date.ToString("MMM dd"))),
            stockIn: [],
            stockOut: @Json.Serialize(Model.WeeklyStockMovements.Select(m => m.StockOut))
        }
    };

    $(document).ready(function() {
        chartConfig.initializeChartDefaults();
        createInventoryValueChart('week');
        createStockMovementChart('all');
        
        // Event handlers
        $('.time-filter').click(function(e) {
            e.preventDefault();
            $('.time-filter').removeClass('active');
            $(this).addClass('active');
            updateInventoryValueChart($(this).data('period'));
        });
        
        $('.mvt-filter').click(function(e) {
            e.preventDefault();
            $('.mvt-filter').removeClass('active');
            $(this).addClass('active');
            updateStockMovementChart($(this).data('type'));
        });
    });
    
    // Generic chart creation function to reduce duplication
    function createChart(chartId, chartType, labels, datasets, options, chartInstance) {
        const ctx = document.getElementById(chartId).getContext('2d');
        
        chartConfig.destroyChartIfExists(chartInstance);
        
        return new Chart(ctx, {
            type: chartType,
            data: { 
                labels: labels,
                datasets: datasets
            },
            options: {
                ...chartConfig.getCommonOptions(chartType),
                ...options
            }
        });
    }
    
    function createInventoryValueChart(period) {
        const periodData = inventoryValueData[period];
        
        const datasets = [{
            label: 'Inventory Value',
            data: periodData.data,
            borderColor: '#3b82f6',
            backgroundColor: 'rgba(59, 130, 246, 0.1)',
            borderWidth: 2,
            fill: true,
            tension: 0.4
        }];
        
        const options = {
            scales: {
                y: {
                    beginAtZero: false,
                    ticks: {
                        callback: value => '$' + value.toLocaleString()
                    }
                }
            },
            plugins: {
                tooltip: {
                    mode: 'index',
                    intersect: false,
                    callbacks: {
                        label: context => new Intl.NumberFormat('en-US', {
                            style: 'currency',
                            currency: 'USD'
                        }).format(context.raw)
                    }
                }
            }
        };
        
        inventoryValueChart = createChart('inventoryValueChart', 'line', periodData.labels, datasets, options, inventoryValueChart);
    }
    
    function createStockMovementChart(type) {
        const typeData = stockMovementData[type];
        
        const datasets = [];
        if (typeData.stockIn.length > 0) {
            datasets.push({
                label: 'Stock In',
                data: typeData.stockIn,
                backgroundColor: 'rgba(16, 185, 129, 0.7)',
                borderColor: 'rgba(16, 185, 129, 1)',
                borderWidth: 1,
                borderRadius: 4
            });
        }
        
        if (typeData.stockOut.length > 0) {
            datasets.push({
                label: 'Stock Out',
                data: typeData.stockOut,
                backgroundColor: 'rgba(239, 68, 68, 0.7)',
                borderColor: 'rgba(239, 68, 68, 1)',
                borderWidth: 1,
                borderRadius: 4
            });
        }
        
        const options = {
            scales: {
                x: {
                    grid: { display: false }
                },
                y: {
                    beginAtZero: true
                }
            }
        };
        
        stockMovementChart = createChart('stockMovementChart', 'bar', typeData.labels, datasets, options, stockMovementChart);
    }
    
    function updateInventoryValueChart(period) {
        createInventoryValueChart(period);
    }
    
    function updateStockMovementChart(type) {
        createStockMovementChart(type);
    }
</script>
} 