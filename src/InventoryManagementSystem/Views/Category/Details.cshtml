@model InventoryManagementSystem.Models.ViewModels.CategoryViewModel
@using InventoryManagementSystem.Models.ViewComponents
@using InventoryManagementSystem.Models.Common

@{
    ViewData["Title"] = "Category Details";
}

<!-- Use a more compact container with less padding -->
<div class="container-fluid px-3 py-2">
    <!-- Use the PageHeader partial with fluent API -->
    @{
        var headerModel = PageHeaderViewModel
            .Create(Model.Name, "fas fa-tag")
            .WithPrimaryButton("Edit Category", Url.Action("Edit", new { id = Model.Id }), "fas fa-edit")
            .WithDeleteButton("category", Model.Name, $"delete-form-{Model.Id}");
    }
    <partial name="_PageHeader" model="headerModel" />

    <!-- Delete Form -->
    <form id="delete-form-@Model.Id" asp-action="Delete" asp-route-id="@Model.Id" class="d-none"></form>

    <div class="row g-3">
        <!-- Category Information Card -->
        <div class="col-lg-8">
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-info-circle text-primary"></i>
                        </span>
                        Category Information
                    </h5>
                    <span class="badge @(Model.IsActive ? "bg-success" : "bg-danger") fs-6 py-1 px-3">
                        <i class="fas @(Model.IsActive ? "fa-check-circle" : "fa-times-circle") me-1"></i>
                        @(Model.IsActive ? "Active" : "Inactive")
                    </span>
                </div>
                <div class="card-body p-3">
                    <div class="row g-4 mb-0">
                        <div class="col-md-12">
                            <div class="info-section">
                                <h6 class="section-title mb-3">
                                    <i class="fas fa-info-circle text-primary me-2"></i>Basic Details
                                </h6>
                                
                                <div class="category-details">
                                    <div class="row mb-4">
                                        <div class="col-sm-3 text-white">
                                            <i class="fas fa-signature text-primary me-2"></i>Name
                                        </div>
                                        <div class="col-sm-9 fw-medium">
                                            @Model.Name
                                        </div>
                                    </div>
                                    
                                    <div class="row mb-4">
                                        <div class="col-sm-3 text-white">
                                            <i class="fas fa-calendar-plus text-primary me-2"></i>Created
                                        </div>
                                        <div class="col-sm-9">
                                            <div class="fw-medium">@Model.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</div>
                                            <div class="text-light-emphasis small mt-1 d-flex align-items-center">
                                                <i class="fas fa-user-circle text-info me-1"></i>
                                                <span>by @Model.CreatedBy</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    @if (Model.UpdatedAt.HasValue)
                                    {
                                        <div class="row mb-4">
                                            <div class="col-sm-3 text-white">
                                                <i class="fas fa-calendar-check text-primary me-2"></i>Last Updated
                                            </div>
                                            <div class="col-sm-9">
                                                <div class="fw-medium">@Model.UpdatedAt.Value.ToString("MMM dd, yyyy h:mm tt")</div>
                                                <div class="text-light-emphasis small mt-1 d-flex align-items-center">
                                                    <i class="fas fa-user-edit text-info me-1"></i>
                                                    <span>by @Model.UpdatedBy</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    
                                    <div class="row">
                                        <div class="col-sm-3 text-white">
                                            <i class="fas fa-toggle-on text-primary me-2"></i>Status
                                        </div>
                                        <div class="col-sm-9">
                                            @if (Model.IsActive)
                                            {
                                                <span class="badge bg-success py-1 px-2">
                                                    <i class="fas fa-check-circle me-1"></i>Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger py-1 px-2">
                                                    <i class="fas fa-times-circle me-1"></i>Inactive
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="product-description">
                                    <h6 class="section-title mb-2">
                                        <i class="fas fa-align-left text-primary me-2"></i>Description
                                    </h6>
                                    <div class="description-content p-3">@Model.Description</div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Category Stats Card -->
            <div class="card content-card shadow-sm mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0 d-flex align-items-center">
                        <span class="icon-circle bg-primary-subtle me-2">
                            <i class="fas fa-chart-pie text-primary"></i>
                        </span>
                        Statistics
                    </h5>
                </div>
                <div class="card-body p-3">
                    <div class="text-center mb-2">
                        <div class="position-relative" style="height: 120px;">
                            <canvas id="categoryProductsCanvas"></canvas>
                            <div class="position-absolute top-50 start-50 translate-middle text-center">
                                <h2 class="mb-0 text-primary fw-bold">@Model.Products.Count</h2>
                                <div class="small text-white">products</div>
                            </div>
                        </div>
                    </div>
                    
                    @{
                        var lowStockCount = Model.Products.Count(p => p.StockStatus == StockStatus.Low);
                        var normalStockCount = Model.Products.Count(p => p.StockStatus == StockStatus.Normal);
                        var highStockCount = Model.Products.Count(p => p.StockStatus == StockStatus.High);
                        
                        var avgPrice = Model.Products.Any() ? Model.Products.Average(p => p.Price) : 0;
                    }
                    
                    <div class="stock-metrics mt-2">
                        <div class="metric-item mb-2">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="d-flex align-items-center">
                                    <i class="fas fa-exclamation-triangle me-2" style="color: #FF5252;"></i>
                                    <span style="color: #FF5252; font-weight: 500;">Low Stock</span>
                                </span>
                                <span class="badge bg-danger px-2 py-1 fs-6">@lowStockCount</span>
                            </div>
                            <div class="progress progress-thin bg-dark" style="height: 5px;">
                                <div class="progress-bar" role="progressbar" 
                                    style="width: @(Model.Products.Any() ? (lowStockCount * 100.0 / Model.Products.Count) : 0)%; background-color: #FF5252;"></div>
                            </div>
                        </div>
                        
                        <div class="metric-item mb-2">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="d-flex align-items-center">
                                    <i class="fas fa-check-circle me-2" style="color: #2ECC71;"></i>
                                    <span style="color: #2ECC71; font-weight: 500;">Normal Stock</span>
                                </span>
                                <span class="badge bg-success px-2 py-1 fs-6">@normalStockCount</span>
                            </div>
                            <div class="progress progress-thin bg-dark" style="height: 5px;">
                                <div class="progress-bar" role="progressbar" 
                                    style="width: @(Model.Products.Any() ? (normalStockCount * 100.0 / Model.Products.Count) : 0)%; background-color: #2ECC71;"></div>
                            </div>
                        </div>
                        
                        <div class="metric-item mb-2">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="d-flex align-items-center">
                                    <i class="fas fa-layer-group me-2" style="color: #F1C40F;"></i>
                                    <span style="color: #F1C40F; font-weight: 500;">High Stock</span>
                                </span>
                                <span class="badge bg-warning px-2 py-1 fs-6">@highStockCount</span>
                            </div>
                            <div class="progress progress-thin bg-dark" style="height: 5px;">
                                <div class="progress-bar" role="progressbar" 
                                    style="width: @(Model.Products.Any() ? (highStockCount * 100.0 / Model.Products.Count) : 0)%; background-color: #F1C40F;"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="price-summary mt-3 text-center">
                        <div class="text-white-50 small mb-0">Average Price</div>
                        <div class="price-value fs-5 fw-bold" style="color: #2ECC71;">@avgPrice.ToString("C")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Related Products Section -->
    <div class="card content-card shadow-sm mt-3">
        <div class="card-header d-flex justify-content-between align-items-center py-3">
            <h5 class="mb-0 d-flex align-items-center">
                <span class="icon-circle bg-primary-subtle me-2">
                    <i class="fas fa-boxes text-primary"></i>
                </span>
                Products in this Category
            </h5>
            <a asp-controller="Product" asp-action="Create" asp-route-categoryId="@Model.Id" class="btn btn-sm btn-primary">
                <i class="fas fa-plus-circle me-1"></i> Add Product
            </a>
        </div>
        <div class="card-body p-3">
            @if (Model.Products.Any())
            {
                <div class="table-responsive">
                    <table class="table data-table m-0">
                        <thead>
                            <tr>
                                <th width="20%">SKU</th>
                                <th width="30%">Name</th>
                                <th width="15%">Price</th>
                                <th width="15%" class="text-center">Stock</th>
                                <th width="10%" class="text-center">Status</th>
                                <th width="10%">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model.Products)
                            {
                                var statusClass = "badge bg-success";
                                var statusText = "OK";
                                var statusIcon = "fas fa-check-circle";
                                
                                if (product.CurrentStock <= 0)
                                {
                                    statusClass = "badge bg-danger";
                                    statusText = "Out";
                                    statusIcon = "fas fa-times-circle";
                                }
                                else if (product.StockStatus == InventoryManagementSystem.Models.Common.StockStatus.Low)
                                {
                                    statusClass = "badge bg-warning";
                                    statusText = "Low";
                                    statusIcon = "fas fa-exclamation-triangle";
                                }
                                
                                <tr class="data-table-row @(product.StockStatus == InventoryManagementSystem.Models.Common.StockStatus.Low ? "low-stock" : (product.CurrentStock <= 0 ? "out-of-stock" : ""))">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-box text-primary me-2"></i>
                                            <span class="code-format">@product.SKU</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="fw-medium">@product.Name</div>
                                    </td>
                                    <td><span class="price-value">@product.Price.ToString("C")</span></td>
                                    <td class="text-center position-relative">
                                        <span class="@(product.CurrentStock <= 0 ? "text-danger fw-medium" : product.StockStatus == InventoryManagementSystem.Models.Common.StockStatus.Low ? "text-warning fw-medium" : "")">
                                            @product.CurrentStock
                                        </span>
                                        @if (product.ReorderLevel > 0)
                                        {
                                            <div class="stock-progress mt-1" title="Stock Level: @product.CurrentStock / Reorder at: @product.ReorderLevel">
                                                <div class="progress progress-thin">
                                                    <div class="progress-bar @(product.CurrentStock <= 0 ? "bg-danger" : product.StockStatus == InventoryManagementSystem.Models.Common.StockStatus.Low ? "bg-warning" : "bg-success")" 
                                                         role="progressbar" 
                                                         style="width: @(Math.Min(100, (int)(product.CurrentStock * 100 / (product.ReorderLevel * 2))))%"
                                                         aria-valuenow="@product.CurrentStock" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="@(product.ReorderLevel * 2)">
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <span class="@statusClass">
                                            <i class="@statusIcon me-1"></i> @statusText
                                        </span>
                                    </td>
                                    <td>
                                        <div class="actions-container d-flex">
                                            <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" class="btn btn-sm btn-outline-primary me-1">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-controller="Product" asp-action="Edit" asp-route-id="@product.Id" class="btn btn-sm btn-outline-secondary">
                                                <i class="fas fa-pen"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div class="mt-3">
                    <div class="d-flex flex-wrap gap-3">
                        <div class="stock-legend">
                            <span class="badge bg-success me-1"><i class="fas fa-check-circle"></i></span>
                            <span class="small">Normal Stock</span>
                        </div>
                        <div class="stock-legend">
                            <span class="badge bg-warning me-1"><i class="fas fa-exclamation-triangle"></i></span>
                            <span class="small">Low Stock</span>
                        </div>
                        <div class="stock-legend">
                            <span class="badge bg-danger me-1"><i class="fas fa-times-circle"></i></span>
                            <span class="small">Out of Stock</span>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info d-flex align-items-center m-0">
                    <i class="fas fa-info-circle me-3 fa-lg"></i>
                    <div>No products in this category yet.</div>
                </div>
                <div class="text-center mt-3">
                    <a asp-controller="Product" asp-action="Create" asp-route-categoryId="@Model.Id" class="btn btn-primary">
                        <i class="fas fa-plus-circle me-1"></i> Add First Product
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Enhanced Delete Confirmation Modal -->
<div class="modal fade confirmation-modal" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="confirmation-icon danger">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <p class="confirmation-message">Are you sure you want to delete the category:</p>
                <div class="confirmation-target">"@Model.Name"</div>
                <div class="confirmation-warning">
                    <i class="fas fa-info-circle"></i>
                    This action cannot be undone. Deleting a category may affect products currently assigned to it.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i> Cancel
                </button>
                <form asp-action="Delete" asp-route-id="@Model.Id" method="post">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-delete">
                        <i class="fas fa-trash me-1"></i> Delete Category
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function() {
            // Add modal attributes to the delete button
            $(".page-header a:contains('Delete')").attr({
                "data-bs-toggle": "modal",
                "data-bs-target": "#deleteModal"
            });
            
            // Create the category products chart
            createCategoryChart();
        });
        
        function createCategoryChart() {
            var ctx = document.getElementById('categoryProductsCanvas');
            
            // Get product stock status counts
            var lowStockCount = @Model.Products.Count(p => p.StockStatus == StockStatus.Low);
            var normalStockCount = @Model.Products.Count(p => p.StockStatus == StockStatus.Normal);
            var highStockCount = @Model.Products.Count(p => p.StockStatus == StockStatus.High);
            
            // Only create chart if canvas exists
            if (ctx) {
                var myChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Low Stock', 'Normal', 'High Stock'],
                        datasets: [{
                            data: [lowStockCount, normalStockCount, highStockCount],
                            backgroundColor: [
                                'rgba(239, 68, 68, 0.8)',   // Red for low stock
                                'rgba(34, 197, 94, 0.8)',   // Green for normal stock
                                'rgba(234, 179, 8, 0.8)'    // Yellow for high stock
                            ],
                            borderColor: [
                                'rgba(239, 68, 68, 1)',
                                'rgba(34, 197, 94, 1)',
                                'rgba(234, 179, 8, 1)'
                            ],
                            borderWidth: 2,
                            hoverOffset: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '75%',
                        animation: {
                            animateScale: true,
                            animateRotate: true,
                            duration: 1000
                        },
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: true,
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleFont: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                bodyFont: {
                                    size: 13
                                },
                                padding: 10,
                                callbacks: {
                                    label: function(context) {
                                        var label = context.label || '';
                                        var value = context.raw || 0;
                                        var total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                        var percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                        return label + ': ' + value + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
            }
        }
    </script>
} 